{"version":3,"sources":["script.ts"],"names":[],"mappings":"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","file":"script.221c08a2.js","sourceRoot":"../src","sourcesContent":["// Defines an interface for Todo with properties id, title, and completed\ninterface Todo {\n    id: number;\n    title: string;\n    completed: boolean;\n}\n  \n  // gets HTML elements for the input of new todos\n  const todoInput = document.getElementById(\"todo-input\") as HTMLInputElement;\n  const addTodoButton = document.getElementById(\"add-todo\") as HTMLButtonElement;\n  const todoList = document.getElementById(\"todo-list\") as HTMLUListElement;\n  \n  // array to store todos\n  let todos: Todo[] = [];\n  \n  // Asynchronous function to fetch todos from API\n  const fetchTodos = async (): Promise<void> => {\n    try {\n      const response = await fetch(\"https://jsonplaceholder.typicode.com/todos?_limit=5\"); // Fetches the first 5\n      const data: Todo[] = await response.json();\n      // Updates todos with the fetched data\n      todos = data;\n      renderTodos();\n    } catch (error) {\n      console.error(\"Failed to fetch todos:\", error);\n    }\n  };\n  \n  // Function to render todos in the user interface\n  const renderTodos = (): void => {\n    todoList.innerHTML = \"\"; // Rensar den befintliga listan i todoList\n    todos.forEach((todo) => {\n      const li = document.createElement(\"li\"); // Skapar ett nytt listobjekt för varje todo\n      li.textContent = todo.title; // Sätter textinnehållet till todo-titeln\n\n      const checkbox = document.createElement(\"input\");\n      checkbox.type = \"checkbox\";\n      checkbox.checked = todo.completed;\n      checkbox.addEventListener(\"change\", () => toggleTodoCompletion(todo.id));\n      li.appendChild(checkbox);\n\n      const deleteButton = document.createElement(\"button\");\n      deleteButton.textContent = \"Delete\";\n      deleteButton.addEventListener(\"click\", () => deleteTodo(todo.id));\n      li.appendChild(deleteButton);\n\n      todoList.appendChild(li);\n    });\n    console.log(\"Renderade todos:\", todos); // Loggar de renderade todos\n  };\n  \n  \n  // Add a new todo\n  const addTodo = (): void => {\n    const title = todoInput.value.trim();\n    if (!title) {\n      alert(\"Write something\");\n      return;\n    }\n    const newTodo: Todo = {\n      id: Date.now(), // Genererar ett unikt (datum)id för den nya todo\n      title, // Title = texten \n      completed: false, // Ej klar som standard\n    };\n    todos.push(newTodo); // Lägger till den nya todo i todos-arrayen\n    console.log(\"Added new todo:\", newTodo); // Loggar den nya todo\n    renderTodos(); // Anropar funktionen för att rendera de uppdaterade todos\n    saveTodos(); // Sparar todos efter att en ny har lagts till\n    todoInput.value = \"\"; // Rensar inmatningsfältet \n  };\n  \n  todoInput.addEventListener(\"keydown\", (event: KeyboardEvent) => {\n    if (event.key === \"Enter\") {\n      addTodo(); // Calls the addTodo function if the Enter key is pressed\n    }\n  });\n  \n  // Toggle todo completion\n  const toggleTodoCompletion = (id: number): void => {\n    todos = todos.map((todo) =>\n      todo.id === id ? { ...todo, completed: !todo.completed } : todo //Toggle för completed\n    );\n    renderTodos(); // Renderar den uppdaterade todo-listan\n  };\n  \n  // Event listeners\n  addTodoButton.addEventListener(\"click\", addTodo); // Adds an event listener to the addTodoButton to call addTodo on click\n  document.addEventListener(\"DOMContentLoaded\", () => {\n    loadTodos(); // Försök att ladda todos från localStorage\n    if (todos.length === 0) { // Om inga todos finns i localStorage\n      fetchTodos(); // Hämta från API:et\n    }\n  }); // Adds an event listener to fetch todos on document load\n  \n// Sparar todos-arrayen till localStorage och consol.logar den\n  const saveTodos = (): void => {\n    localStorage.setItem(\"todos\", JSON.stringify(todos)); \n    console.log(\"Todos in localStorage:\", todos);\n  };\n  \n  const loadTodos = (): void => {\n    const saved = localStorage.getItem(\"todos\"); // Hämtar sparade todos från localStorage\n    console.log(\"Laddar todos från localStorage:\", saved); // Loggar vad som finns i localStorage\n    if (saved) {\n      todos = JSON.parse(saved); // Parsar de sparade todos tillbaka till todos-arrayen\n      console.log(\"Todos efter parsing:\", todos); // Loggar de parsade todos\n      renderTodos(); // Anropar funktionen för att rendera de laddade todos\n    }\n  };\n  \n  addTodoButton.addEventListener(\"click\", () => {\n    addTodo();\n    saveTodos();\n  });\n  \n  document.addEventListener(\"DOMContentLoaded\", () => {\n    loadTodos(); // Loads the saved todos on document load\n    // fetchTodos(); // Fetches the todos from the API on document load (avstängd för jag bara vill att den ska laddas om det ej finns några i local storage)\n  });\n  \n  const deleteTodo = (id: number): void => {\n    todos = todos.filter((todo) => todo.id !== id);\n    renderTodos();\n  };"]}